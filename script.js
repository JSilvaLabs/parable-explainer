/**
 * Simple Parable Explainer (MVP3 Iteration)
 *
 * Features:
 * - Fetches Bible text from BSB.json.
 * - Processes a predefined list of parables with multiple references and thorough explanations.
 * - Displays all references for a parable, allowing clicks to load specific BSB text.
 * - Filters parables by title.
 * - Remembers the last viewed parable using localStorage.
 * - Includes robust error handling and user feedback.
 */
document.addEventListener('DOMContentLoaded', () => {

    // --- DOM Element References ---
    const listContainer = document.getElementById('parable-list');
    const textDisplay = document.getElementById('parable-text');
    const explanationDisplay = document.getElementById('parable-explanation');
    const referenceDisplay = document.getElementById('parable-reference');
    const searchInput = document.getElementById('search-input');
    const messageDisplay = document.getElementById('message-display');
  
    // --- State Variables ---
    let bsbData = null; // Holds the fetched BSB JSON data
    let parableIndex = []; // Holds processed: {id, title, allReferencesArray, explanation}
    let currentlySelectedParableId = null; // ID (index) of the main parable being shown
    let currentlyDisplayedRef = null; // The specific reference string whose text is currently displayed
    let currentlySelectedListButton = null; // The button element selected in the list
  
    // --- Constants ---
    const LAST_VIEWED_STORAGE_KEY = 'parableExplainerLastViewedId';
  
    // --- Data Definitions ---
    // Target parables: Title, array of References, Thorough Explanation.
    // NOTE: Explanations generated by AI based on previous prompt.
    // References should be verified for accuracy and completeness.
    const targetParables = [
        // Matthew
        { title: "Salt of the Earth", references: ["Matthew 5:13"], explanation: "Jesus declares His followers are the 'salt of the earth,' essential for preserving goodness and adding spiritual 'flavor' to a corrupt world. This implies a distinct, counter-cultural lifestyle. However, He warns that if this distinctiveness ('saltiness') is lost through compromise or conformity, believers become ineffective ('good for nothing') in their Kingdom purpose. This calls for maintaining spiritual integrity and impactful witness." },
        { title: "Lamp Under a Bowl", references: ["Matthew 5:14-16", "Mark 4:21-22", "Luke 8:16", "Luke 11:33"], explanation: "Comparing believers to the 'light of the world' and a 'city on a hill,' Jesus emphasizes that their faith and good works, resulting from God's grace, are meant to be visible. Hiding this light (like putting a lamp under a basket) defeats its purpose. Instead, it should shine openly to illuminate truth and draw attention not to the believers themselves, but to glorify God the Father. It's a mandate for open witness and impactful living." },
        { title: "Wise and Foolish Builders", references: ["Matthew 7:24-27", "Luke 6:47-49"], explanation: "Concluding the Sermon on the Mount, Jesus contrasts two foundations for life. Hearing *and acting* upon His teachings is like building a house on solid rock – able to withstand life's storms (trials, judgment). Merely hearing without obedience is like building on sand – superficially easy, but destined for collapse when tested. The parable underscores that true discipleship involves not just intellectual assent but active obedience to Christ's words as the only secure foundation for eternal life." },
        { title: "New Cloth on an Old Coat", references: ["Matthew 9:16", "Mark 2:21", "Luke 5:36"], explanation: "This, along with the 'New Wine' parable, illustrates the incompatibility of Jesus' new covenant teachings with the old, rigid structures of Judaism (represented by the old garment). Trying to merely 'patch' the old system with the new truth of the gospel is futile and damaging; the vitality of the new will tear away from the inflexibility of the old. It signifies the radical newness of the Kingdom Jesus inaugurated." },
        { title: "New Wine in Old Wineskins", references: ["Matthew 9:17", "Mark 2:22", "Luke 5:37-39"], explanation: "Complementing the 'New Cloth' parable, new wine (representing the vibrant, expansive life of the Holy Spirit and the Gospel) requires new wineskins (flexible, yielded hearts and structures). Old, brittle wineskins (rigid legalism, unprepared hearts) cannot contain the fermenting power of the new covenant; they will burst, losing both the container and the wine. It emphasizes the need for hearts made new by God to receive the fullness of Christ's kingdom." },
        { title: "The Sower", references: ["Matthew 13:3-9", "Mark 4:1-9", "Luke 8:4-8"], explanation: "Jesus uses the familiar image of a farmer scattering seed to illustrate the varied reception of the 'word of the kingdom'. The Sower is Christ (and His followers), the Seed is the Word of God, and the Soil represents different heart conditions. The Path (hardened heart) allows Satan to snatch the seed. Rocky Ground (superficial heart) receives gladly but lacks root for trials. Thorny Ground (worldly heart) allows cares and riches to choke the Word. Only Good Soil (receptive heart, prepared by God) hears, understands, and bears lasting fruit (in varying degrees). It stresses the importance of the hearer's disposition for the Word's effectiveness. (Interpretation: Matt 13:18-23, Mark 4:13-20, Luke 8:11-15)." },
        { title: "The Weeds (Tares)", references: ["Matthew 13:24-30"], explanation: "The kingdom of heaven is likened to a field where good seed (children of the kingdom) is sown by the master (Jesus), but an enemy (Satan) secretly sows weeds (children of the evil one). The master instructs servants not to uproot the weeds prematurely, lest they damage the wheat. Both grow together until the harvest (end of the age), when angels will separate the wicked for judgment (fire) and gather the righteous into the Father's kingdom. It teaches about the present mixture of good and evil in the world and the certainty of future judgment and separation. (Interpretation: Matt 13:36-43)." },
        { title: "The Mustard Seed", references: ["Matthew 13:31-32", "Mark 4:30-32", "Luke 13:18-19"], explanation: "Comparing the kingdom to a tiny mustard seed, Jesus highlights its seemingly insignificant beginnings. Yet, like the seed growing into a large plant providing shelter for birds, the kingdom of God will experience surprising, extensive growth and become a significant presence in the world, offering refuge and encompassing many. It speaks of the hidden power and eventual vastness of God's reign initiated by Christ." },
        { title: "The Leaven (Yeast)", references: ["Matthew 13:33", "Luke 13:20-21"], explanation: "Similar to the Mustard Seed, this parable emphasizes the pervasive influence of the kingdom. Like a small amount of leaven working its way through a large batch of dough, the kingdom of heaven exerts a quiet, internal, yet powerful and transformative influence that gradually permeates all aspects of life and society until its influence is complete. It highlights the hidden, internal, and spreading nature of God's work." },
        { title: "The Hidden Treasure", references: ["Matthew 13:44"], explanation: "The kingdom of heaven is portrayed as a treasure of such immense value that someone stumbling upon it in a field would joyfully sell everything they own to acquire the field and thus the treasure. This emphasizes the supreme worth of finding and entering God's kingdom; it surpasses all earthly possessions, making any sacrifice worthwhile for the joy of obtaining it. It highlights the personal discovery and overwhelming value of salvation." },
        { title: "The Pearl of Great Price", references: ["Matthew 13:45-46"], explanation: "Similar to the Hidden Treasure, this parable depicts a merchant actively seeking fine pearls. Upon finding one pearl of surpassing value (representing the kingdom or Christ Himself), he liquidates all his assets to acquire it. This again stresses the incomparable worth of the kingdom, motivating a deliberate and total commitment, sacrificing all else to gain the ultimate prize of relationship with God." },
        { title: "The Net (Drawing in the Net)", references: ["Matthew 13:47-50"], explanation: "The kingdom is compared to a dragnet gathering fish of every kind from the sea. This represents the inclusive reach of the gospel message in the present age, drawing many into the visible church. However, like the fishermen sorting the catch, there will be a final judgment at the end of the age where angels will separate the wicked from the righteous, casting the wicked into fiery judgment. It underscores the present mixed nature of the kingdom's visible aspect and the inevitability of future separation." },
        { title: "Owner of a House", references: ["Matthew 13:52"], explanation: "Jesus concludes a series of parables by comparing a scribe 'trained for the kingdom of heaven' to the owner of a house who brings out treasures both new and old. This suggests that a true disciple or teacher understands and utilizes both the established truths of God's revelation (the Old Testament) and the new insights and fulfillments brought by Christ and His kingdom teachings." },
        { title: "The Lost Sheep", references: ["Matthew 18:12-14", "Luke 15:3-7"], explanation: "Illustrating God's heart for the lost, Jesus describes a shepherd leaving ninety-nine sheep to diligently search for one that has strayed. The shepherd's immense joy upon finding the lost sheep mirrors the joy in heaven over one sinner who repents. This parable emphasizes God's personal, seeking love for individuals and the immense value He places on each soul, particularly those considered 'lost'." },
        { title: "The Unforgiving Servant", references: ["Matthew 18:23-35"], explanation: "A king forgives a servant's enormous, unpayable debt. That same servant then refuses to forgive a fellow servant's minuscule debt, treating him harshly. The king, hearing of this, reinstates the original debt and delivers the unforgiving servant to punishment. The parable powerfully teaches that our reception of God's immense forgiveness through Christ compels us to extend forgiveness freely to others who have wronged us. Failure to forgive reveals a lack of true understanding or appreciation of God's grace." },
        { title: "The Workers in the Vineyard", references: ["Matthew 20:1-16"], explanation: "A landowner hires workers at different times throughout the day but pays them all the same full day's wage. Those hired first grumble, but the landowner asserts his right to be generous. This illustrates God's sovereignty and grace in His kingdom. Salvation and its rewards are gifts of grace, not strictly earned based on merit or duration of service. God is generous to all who respond to His call, regardless of when they come." },
        { title: "The Two Sons", references: ["Matthew 21:28-32"], explanation: "A father asks two sons to work in the vineyard. The first initially refuses but later repents and goes. The second agrees but doesn't go. Jesus asks which son did the father's will, highlighting that outward compliance or profession without genuine action is meaningless. True obedience involves repentance and doing God's will, even if there was initial resistance. It contrasts the repentant 'sinners' with the outwardly religious but disobedient leaders." },
        { title: "The Wicked Tenants", references: ["Matthew 21:33-44", "Mark 12:1-11", "Luke 20:9-18"], explanation: "A landowner leases his vineyard (representing Israel) to tenants (religious leaders) who mistreat and kill the servants (prophets) sent to collect the fruit. Finally, they kill the owner's son (Jesus) hoping to seize the inheritance. The parable predicts Jesus' rejection and death at the hands of the leaders and warns of God's judgment upon them, resulting in the kingdom being taken from them and given to others (Gentiles/the Church) who will produce its fruit." },
        { title: "The Wedding Feast", references: ["Matthew 22:1-14", "Luke 14:16-24"], explanation: "A king prepares a wedding feast for his son, but the initially invited guests (representing Israel/religious leaders) make excuses and refuse to come, some even mistreating the messengers. Enraged, the king invites anyone from the streets (representing Gentiles/sinners) to fill the hall. However, one guest is found without a proper wedding garment (representing imputed righteousness through faith in Christ) and is cast out. It signifies God's gracious invitation to salvation, the rejection by some, the inclusion of others, and the requirement of genuine faith and righteousness to remain in the kingdom." },
        { title: "The Fig Tree", references: ["Matthew 24:32-35", "Mark 13:28-31", "Luke 21:29-33"], explanation: "Jesus uses the analogy of a fig tree putting forth leaves as a reliable sign that summer is near. Similarly, He teaches that the specific signs He described occurring during the tribulation period will reliably indicate that His return and the end of the age are imminent ('near, right at the door'). It encourages believers to recognize the signs of the times and be prepared, affirming the certainty of His prophetic word." },
        { title: "The Faithful and Wise Servant", references: ["Matthew 24:45-51", "Luke 12:42-48"], explanation: "This parable contrasts two types of servants left in charge while the master is away. The faithful and wise servant diligently cares for the household (fellow believers/responsibilities) and is rewarded upon the master's unexpected return. The wicked servant, assuming a delay, abuses others and lives selfishly, facing sudden judgment. It emphasizes the need for constant faithfulness, readiness, and responsible stewardship in anticipation of Christ's return, warning against complacency and abuse of position." },
        { title: "The Ten Virgins", references: ["Matthew 25:1-13"], explanation: "Ten virgins await a bridegroom; five wisely bring extra oil for their lamps, while five foolishly do not. When the bridegroom is delayed and arrives at midnight, only the prepared virgins can enter the wedding feast; the unprepared are shut out. This parable stresses the necessity of genuine, enduring spiritual preparedness (represented by the oil, often symbolizing the Holy Spirit or true faith) for Christ's return, which may be delayed. Last-minute preparation or relying on others is impossible." },
        { title: "The Talents", references: ["Matthew 25:14-30", "Luke 19:11-27"], explanation: "A master entrusts different amounts of money (talents/minas, representing gifts, resources, opportunities) to servants before leaving. Upon return, those who invested and multiplied their talents are rewarded proportionally, while the servant who fearfully hid his one talent is condemned. It teaches that believers are accountable to God for using the resources He entrusts to them faithfully and productively for His kingdom. Faithful stewardship, regardless of the amount received, is expected and rewarded; negligence stemming from fear or laziness is judged." },
        { title: "The Sheep and the Goats", references: ["Matthew 25:31-46"], explanation: "Describing the final judgment when Christ returns, this passage depicts the Son of Man separating all nations like a shepherd separates sheep from goats. The 'sheep' (righteous) are welcomed into the kingdom because they showed practical love and compassion to Christ implicitly by ministering to the needs (hunger, thirst, loneliness, nakedness, sickness, imprisonment) of 'the least of these brothers and sisters'. The 'goats' (unrighteous) are condemned because they failed to show such compassion. It highlights that genuine saving faith manifests in acts of love towards others, especially fellow believers in need, which Christ considers as service done directly to Him." },
        // Mark
        { title: "The Growing Seed", references: ["Mark 4:26-29"], explanation: "Jesus compares the kingdom of God to a seed sown that sprouts and grows mysteriously, day and night, without the sower fully understanding how. The earth produces grain automatically: first the stalk, then the head, then the full kernel. Only when the grain is ripe does the sower put in the sickle for harvest. Unique to Mark, this emphasizes the inherent, divine power within the kingdom's message to grow and produce results seemingly on its own, culminating in God's appointed time for judgment/gathering." },
        { title: "The Doorkeeper", references: ["Mark 13:33-37"], explanation: "Likened to a man going on a journey who leaves his servants in charge with specific tasks and commands the doorkeeper to stay awake, this parable concludes Mark's Olivet Discourse. It serves as a strong exhortation for all disciples to 'Be on guard! Be alert!' and 'Watch!' because the time of the Master's (Christ's) return is unknown. Vigilance and faithfulness in one's duties are essential to avoid being found unprepared." },
        // Luke
        { title: "The Two Debtors", references: ["Luke 7:40-43"], explanation: "In response to Simon the Pharisee's judgment of a woman anointing His feet, Jesus tells of a moneylender who forgave two debtors, one owing much more than the other. He asks Simon which debtor would love the lender more, eliciting the answer: 'the one who had the bigger debt canceled.' Jesus applies this to the woman, whose great love demonstrated her awareness of having been forgiven much, contrasting her with Simon's lack of love and hospitality, implying his unawareness of his own need for forgiveness. It teaches that love for God is proportional to the experienced depth of His forgiveness." },
        { title: "The Good Samaritan", references: ["Luke 10:25-37"], explanation: "An expert in the law asks Jesus, 'Who is my neighbor?' to justify himself after affirming the command to love God and neighbor. Jesus responds with the story of a traveler beaten by robbers and ignored by a priest and a Levite, but compassionately cared for by a Samaritan (a group despised by Jews). Jesus then asks who *acted* as a neighbor, forcing the lawyer to admit it was the one who showed mercy. The parable redefines 'neighbor' not by proximity or affiliation but by compassionate action towards anyone in need, challenging prejudice and commanding active mercy." },
        { title: "The Friend at Midnight", references: ["Luke 11:5-13"], explanation: "Jesus illustrates persistence in prayer through a story of a man boldly and shamelessly knocking at his friend's door late at night to request bread for an unexpected guest. The friend eventually grants the request not out of friendship but because of the man's persistent audacity ('shamelessness'). Jesus concludes by encouraging His disciples to persistently ask, seek, and knock, assuring them that their loving Heavenly Father, unlike the reluctant friend, eagerly gives good gifts, especially the Holy Spirit, to those who ask Him." },
        { title: "The Rich Fool", references: ["Luke 12:13-21"], explanation: "After warning against greed, Jesus tells of a rich man whose land produced so abundantly he planned to tear down his barns and build bigger ones to store his wealth for a life of ease. But God calls him a fool, informing him his life will be required that very night, and asking who will get his hoarded possessions. The parable powerfully warns against placing one's security and life's meaning in material wealth ('things') rather than in a right relationship with God ('rich toward God'). Earthly treasures are temporary; spiritual wealth is eternal." },
        { title: "The Unfruitful Fig Tree", references: ["Luke 13:6-9"], explanation: "A man finds no fruit on his fig tree after three years and orders it cut down. The vinedresser pleads for one more year, promising to cultivate and fertilize it, but agreeing to cut it down if it still bears no fruit. This illustrates God's judgment against persistent unfruitfulness (particularly aimed at Israel, but applicable individually), His patience in offering further opportunities for repentance (the vinedresser's intercession representing Christ's work), but also the certainty of eventual judgment if repentance does not occur." },
        { title: "The Lowest Seat at the Feast", references: ["Luke 14:7-14"], explanation: "Observing guests choosing places of honor at a feast, Jesus advises taking the lowest seat instead, so the host might honor you by moving you higher, rather than being humbled by being asked to move down. This teaches kingdom humility: 'For all those who exalt themselves will be humbled, and those who humble themselves will be exalted.' He further exhorts hosting those (the poor, crippled, lame, blind) who cannot repay, promising a reward at the resurrection of the righteous." },
        { title: "Counting the Cost", references: ["Luke 14:28-33"], explanation: "Jesus uses two brief illustrations – a person planning to build a tower and a king preparing for war – to emphasize the need for prospective disciples to realistically assess the demands of following Him. Just as one calculates the cost before building or assesses strength before battle, individuals must consider the total commitment required (forsaking possessions, prioritizing Christ above all else) before embarking on discipleship, lest they start and fail to finish. True discipleship requires deliberate, wholehearted commitment." },
        { title: "The Lost Coin", references: ["Luke 15:8-10"], explanation: "Paired with the Lost Sheep, this parable depicts a woman diligently sweeping her house to find one lost silver coin out of ten. Upon finding it, she calls her friends and neighbors to rejoice with her. Jesus applies this directly: 'In the same way, I tell you, there is rejoicing in the presence of the angels of God over one sinner who repents.' It emphasizes God's meticulous care, the value He places on each individual soul, and the immense joy in heaven when even one lost person is found (repents)." },
        { title: "The Prodigal Son", references: ["Luke 15:11-32"], explanation: "Perhaps the most famous parable, it contrasts two sons. The younger demands his inheritance, squanders it wastefully, and ends up destitute. He humbly returns, planning to beg for servant status, but his father sees him from afar, runs to him, embraces him, and throws a lavish welcome-home feast, celebrating his return ('was dead and is alive again'). The older, dutiful son resents this grace shown to his brother. The parable profoundly illustrates the boundless, compassionate, and forgiving love of God the Father towards repentant sinners, while also subtly rebuking the self-righteous attitude (like the Pharisees') that begrudges God's grace extended to the 'unworthy'." },
        { title: "The Shrewd Manager", references: ["Luke 16:1-13"], explanation: "A manager about to be fired for wasting his master's possessions cleverly uses his remaining authority to reduce the debts owed to his master, thereby securing goodwill from the debtors for his own future. Jesus commends the manager's *shrewdness* (not his dishonesty), urging His disciples ('sons of light') to be equally wise and resourceful in using worldly wealth ('unrighteous mammon') for eternal purposes – to gain heavenly rewards and relationships. He concludes by stressing faithfulness in small matters and the impossibility of serving both God and Money." },
        { title: "The Rich Man and Lazarus", references: ["Luke 16:19-31"], explanation: "This story contrasts a rich man living in luxury, callously ignoring the suffering beggar Lazarus at his gate, with their respective fates after death. Lazarus is comforted in Abraham's bosom, while the rich man is in torment in Hades. The rich man's pleas for relief and for Lazarus to warn his brothers are denied; Abraham states there is an unbridgeable chasm and that his brothers have Moses and the Prophets (Scripture) – if they don't listen to them, they wouldn't be convinced even if someone rose from the dead. It warns powerfully against wealth-induced indifference to the poor and emphasizes the sufficiency and authority of Scripture for salvation, along with the finality of one's eternal destiny." },
        { title: "Master and His Servant", references: ["Luke 17:7-10"], explanation: "Jesus asks if a master would thank a servant for simply doing the tasks assigned (plowing, tending sheep, preparing meals). The expected answer is no. Likewise, He instructs His disciples, 'when you have done everything you were told to do, should say, «We are unworthy servants; we have only done our duty.»' This teaches humility in service to God. Obedience is our expected duty, not a means of earning special favor or placing God in our debt. We serve out of obligation and love, not for self-congratulation." },
        { title: "The Persistent Widow", references: ["Luke 18:1-8"], explanation: "Jesus tells of a persistent widow continually petitioning an unjust judge (who feared neither God nor man) for justice against her adversary. The judge eventually grants her request simply to be rid of her persistent bothering. Jesus uses this 'lesser-to-greater' argument: If even an unjust judge responds to persistence, how much more will the just God respond speedily to the cries of His chosen people who pray day and night? It encourages believers to pray continually, persistently, and with faith, never giving up hope in God's justice." },
        { title: "The Pharisee and the Tax Collector", references: ["Luke 18:9-14"], explanation: "Contrasting two men praying in the temple: a self-righteous Pharisee recounts his religious deeds and thanks God he isn't like sinners, while a tax collector stands afar off, beats his breast, and humbly pleads, 'God, have mercy on me, a sinner.' Jesus declares the tax collector went home justified before God, rather than the Pharisee. It powerfully illustrates that God accepts humble, penitent faith recognizing need, while rejecting self-righteous pride based on works. Justification comes through God's mercy, not self-merit." },
        // John (Allegory/Discourse)
        { title: "The Shepherd and His Flock", references: ["John 10:1-18"], explanation: "Though more an allegory or extended metaphor than a narrative parable, Jesus describes Himself as the 'gate' for the sheep (providing exclusive access to salvation) and the 'Good Shepherd' who knows His sheep intimately, leads them, protects them from thieves and robbers (false teachers/leaders), and ultimately lays down His life for them voluntarily. He contrasts Himself with 'hired hands' who abandon the sheep in danger. It reveals Jesus' unique identity, His protective love for His followers, and His substitutionary atonement, offering eternal life and security to His 'flock'." }
      ];
  
    // --- Utility Functions ---
  
    /**
     * Parses a Bible reference string (e.g., "Book Chapter:Verse-Verse") into an object.
     * Designed to be testable. Includes specific handling for "Revelation of John".
     * @param {string} refString - The Bible reference string.
     * @returns {object|null} Parsed object { book, chapter, startVerse, endVerse } or null on failure.
     */
    function parseRef(refString) {
      // Implementation remains the same as previous MVP cycle - focused on robustness
      if (!refString || typeof refString !== 'string') return null;
      const match = refString.match(/^(.+?)\s+(\d+)\s*:\s*(\d+)(?:\s*-\s*(\d+))?\s*$/);
      if (!match) {
        console.error(`[parseRef] Failed to parse reference format: "${refString}"`);
        return null;
      }
      try {
        let bookName = match[1].trim();
        if (bookName === "Revelation of John") bookName = "Revelation";
        const chapter = parseInt(match[2], 10);
        const startVerse = parseInt(match[3], 10);
        const endVerse = match[4] ? parseInt(match[4], 10) : startVerse;
        if (isNaN(chapter) || isNaN(startVerse) || isNaN(endVerse) || chapter <= 0 || startVerse <= 0 || endVerse < startVerse) {
          console.error(`[parseRef] Invalid numbers in parsed reference: "${refString}"`);
          return null;
        }
        return { book: bookName, chapter, startVerse, endVerse };
      } catch (error) {
        console.error(`[parseRef] Error processing reference "${refString}":`, error);
        return null;
      }
    }
  
    /**
     * Extracts text for a given parsed reference from the loaded BSB JSON data.
     * Handles missing data gracefully. Designed to be testable.
     * @param {object} parsedRef - The object returned by parseRef { book, chapter, startVerse, endVerse }.
     * @param {object} fullBsbData - The parsed BSB.json data.
     * @returns {string} The extracted Bible text, or a specific error indicator string.
     */
    function getTextFromBSB(parsedRef, fullBsbData) {
       // Implementation remains the same as previous MVP cycle - focused on robustness
      const errorPrefix = "[Text Unavailable] ";
      if (!parsedRef) return errorPrefix + "Invalid reference format provided.";
      if (!fullBsbData || !Array.isArray(fullBsbData.books)) return errorPrefix + "BSB data is missing or invalid.";
      const bookData = fullBsbData.books.find(b => b.name.toLowerCase() === parsedRef.book.toLowerCase());
      if (!bookData) return errorPrefix + `Book "${parsedRef.book}" not found.`;
      if (!Array.isArray(bookData.chapters)) return errorPrefix + `Invalid chapter data for "${parsedRef.book}".`;
      const chapterData = bookData.chapters.find(c => c.chapter === parsedRef.chapter);
      if (!chapterData) return errorPrefix + `Chapter ${parsedRef.chapter} not found in "${parsedRef.book}".`;
      if (!Array.isArray(chapterData.verses)) return errorPrefix + `Invalid verse data for ${parsedRef.book} ${parsedRef.chapter}.`;
      let extractedText = "";
      let versesFound = 0;
      for (let v = parsedRef.startVerse; v <= parsedRef.endVerse; v++) {
        const verseData = chapterData.verses.find(verse => verse.verse === v);
        if (verseData && typeof verseData.text === 'string') {
          extractedText += verseData.text.trim() + " ";
          versesFound++;
        } else {
          console.warn(`[getTextFromBSB] Verse ${v} missing or invalid in ${parsedRef.book} ${parsedRef.chapter}.`);
        }
      }
      if (versesFound === 0) return errorPrefix + `No verses found for range ${parsedRef.startVerse}-${parsedRef.endVerse} in ${parsedRef.book} ${parsedRef.chapter}.`;
      return extractedText.trim();
    }
  
    /**
     * Processes the target parables list after BSB data is loaded.
     * Builds the parableIndex used by the application. Text is NOT extracted here.
     */
    function processParables() {
      if (!bsbData) {
          console.error("[processParables] BSB data not loaded.");
          showMessage("Critical Error: Bible data could not be processed.", "error");
          return;
      }
      // Map targetParables, primarily just ensuring structure is okay.
      // Text extraction happens dynamically later.
      parableIndex = targetParables.map((target, index) => ({
        id: index,
        title: target.title,
        allReferencesArray: Array.isArray(target.references) ? target.references : [target.reference || "N/A"],
        explanation: target.explanation || "[Explanation not provided]"
      }));
  
      console.log(`[processParables] Initialized parable index with ${parableIndex.length} entries.`);
  
      if (parableIndex.length > 0) {
          renderList(parableIndex); // Render the full list initially
          // Load last viewed or default parable
          const lastViewedId = loadLastParable();
          const initialParable = parableIndex.find(p => p.id === lastViewedId) || parableIndex[0];
          if (initialParable) {
              displayParable(initialParable.id); // Display initial parable
          }
          showMessage(""); // Clear loading message
      } else {
          showMessage("Error: No parables were loaded or processed.", "error");
          renderList([]); // Render empty list
      }
    }
  
  
    // --- UI Update Functions ---
  
     /**
     * Displays status messages (loading, error, info) in the designated area.
     * @param {string} message - The message text. Empty string hides the message area.
     * @param {string} type - 'loading', 'error', or 'info'. Determines CSS class.
     */
     function showMessage(message, type = 'info') {
        // Implementation remains the same as previous MVP cycle
        messageDisplay.textContent = message;
        messageDisplay.className = message ? type : '';
        messageDisplay.style.display = message ? 'block' : 'none';
     }
  
    /**
     * Renders the list of parable buttons into the list container.
     * @param {Array} parablesToRender - Array of parable objects from parableIndex (potentially filtered).
     */
    function renderList(parablesToRender) {
      // Implementation remains the same as previous MVP cycle
      listContainer.innerHTML = '';
      if (!Array.isArray(parablesToRender) || parablesToRender.length === 0) {
        const message = searchInput.value.trim() ? 'No matching parables found.' : 'Parable list is empty or failed to load.';
        listContainer.innerHTML = `<p>${message}</p>`;
        return;
      }
      parablesToRender.forEach(parable => {
        const button = document.createElement('button');
        button.textContent = parable.title;
        button.setAttribute('data-id', parable.id);
        button.setAttribute('title', parable.allReferencesArray.join(', '));
        button.addEventListener('click', () => {
          displayParable(parable.id);
        });
        listContainer.appendChild(button);
      });
    }
  
    /**
     * Displays the selected parable's constant details (title, explanation, refs)
     * and triggers the loading of the primary reference text. Saves state.
     * @param {number} parableId - The ID (index) of the parable in the parableIndex array.
     */
    function displayParable(parableId) {
      const selectedParable = parableIndex.find(p => p.id === parableId);
  
      if (selectedParable) {
        currentlySelectedParableId = parableId; // Track the main selection
        saveLastParable(parableId); // Save state
  
        // Display Explanation (Thorough)
        explanationDisplay.innerHTML = `<h3>Explanation</h3><p>${selectedParable.explanation.replace(/\n/g, '<br>')}</p>`; // Added line break handling
  
        // Render Clickable References
        let referenceHTML = '<p class="ref-label">References:</p>'; // Use class for label styling
        if (selectedParable.allReferencesArray && selectedParable.allReferencesArray.length > 0) {
            selectedParable.allReferencesArray.forEach((ref, index) => {
                // Render as buttons styled like links
                referenceHTML += `<button class="ref-link" data-ref="${ref}" data-parable-id="${parableId}">${ref}</button>`;
            });
        } else {
            referenceHTML += '<p>N/A</p>';
        }
        referenceDisplay.innerHTML = referenceHTML;
        // Add event listeners to the newly created reference buttons/links
        referenceDisplay.querySelectorAll('.ref-link').forEach(link => {
            link.addEventListener('click', handleReferenceClick);
        });
  
        // Determine and display the primary reference text initially
        const primaryRefString = selectedParable.allReferencesArray[0] || null;
        if (primaryRefString) {
          displayTextForReference(primaryRefString, true); // True indicates it's the primary display for this parable
        } else {
          textDisplay.innerHTML = `<h2>${selectedParable.title}</h2><p>[Text Unavailable: No primary reference defined]</p>`;
          referenceDisplay.querySelector('p').textContent = "References: N/A"; // Update if no refs
        }
  
  
        // --- Handle List Button Highlighting ---
        const selectedButton = listContainer.querySelector(`button[data-id='${parableId}']`);
        if (currentlySelectedListButton) {
          currentlySelectedListButton.classList.remove('selected');
        }
        if (selectedButton) {
          selectedButton.classList.add('selected');
          currentlySelectedListButton = selectedButton;
        }
         showMessage(""); // Clear any status messages
  
      } else {
        console.error(`[displayParable] Parable ID ${parableId} not found in index.`);
        showMessage(`Error: Could not display details for selected parable.`, 'error');
        if (currentlySelectedListButton) {
            currentlySelectedListButton.classList.remove('selected');
            currentlySelectedListButton = null;
        }
      }
    }
  
     /**
     * Handles clicks on the dynamically generated reference links/buttons.
     * @param {Event} event - The click event object.
     */
     function handleReferenceClick(event) {
         event.preventDefault(); // Prevent default if using <a> tags
         const refString = event.target.getAttribute('data-ref');
         // Optional: Could get parableId from target too if needed, but currentlySelectedParableId should be set
         // const parableId = parseInt(event.target.getAttribute('data-parable-id'), 10);
         if (refString) {
             displayTextForReference(refString, false); // False indicates not the primary text load
         } else {
             console.error("[handleReferenceClick] Clicked reference element missing data-ref attribute.");
         }
     }
  
    /**
     * Parses a reference, gets its BSB text, and updates the text display area.
     * Also updates the visual state of the clicked reference link/button.
     * @param {string} refString - The reference string to display text for.
     * @param {boolean} isPrimary - Indicates if this is the initial text load for the main parable title.
     */
    function displayTextForReference(refString, isPrimary) {
        const parsedRef = parseRef(refString);
        const text = getTextFromBSB(parsedRef, bsbData);
  
        // Find the currently selected parable object again (needed for title)
        const currentParable = parableIndex.find(p => p.id === currentlySelectedParableId);
        const title = currentParable ? currentParable.title : "Parable Text";
  
        // Update the text display - always show Title, make text content dynamic
        textDisplay.innerHTML = `<h2>${title}</h2><p>${text.replace(/\n/g, '<br>')}</p>`;
        currentlyDisplayedRef = refString; // Update state
  
        // Update highlighting on reference links/buttons
        referenceDisplay.querySelectorAll('.ref-link').forEach(link => {
            if (link.getAttribute('data-ref') === refString) {
                link.classList.add('active'); // Add 'active' class to the clicked one
            } else {
                link.classList.remove('active'); // Remove from others
            }
        });
    }
  
    // --- Filtering Function ---
  
    /**
     * Filters the parableIndex based on search input and re-renders the list.
     */
    function filterParables() {
      // Implementation remains the same as previous MVP cycle
      const searchTerm = searchInput.value.toLowerCase().trim();
      if (!Array.isArray(parableIndex)) {
          console.warn("[filterParables] Filtering attempted before parableIndex was initialized.");
          return;
      }
      const filteredParables = parableIndex.filter(parable =>
        parable.title.toLowerCase().includes(searchTerm)
      );
      renderList(filteredParables);
    }
  
    // --- State Persistence Functions ---
  
    /**
     * Saves the ID of the last selected parable to localStorage.
     * @param {number} parableId - The ID to save.
     */
    function saveLastParable(parableId) {
        try {
            localStorage.setItem(LAST_VIEWED_STORAGE_KEY, parableId.toString());
        } catch (error) {
            console.warn("[saveLastParable] Could not save to localStorage:", error);
            // Non-critical, app can continue.
        }
    }
  
    /**
     * Loads the ID of the last selected parable from localStorage.
     * @returns {number | null} The loaded ID or null if not found/invalid.
     */
    function loadLastParable() {
        try {
            const savedId = localStorage.getItem(LAST_VIEWED_STORAGE_KEY);
            if (savedId !== null) {
                const parsedId = parseInt(savedId, 10);
                // Basic validation: ensure it's a number within potential index range
                if (!isNaN(parsedId) && parsedId >= 0) {
                    // Further validation could check against parableIndex length after processing
                    return parsedId;
                }
            }
        } catch (error) {
            console.warn("[loadLastParable] Could not load from localStorage:", error);
        }
        return null; // Return null if nothing saved or error occurred
    }
  
  
    // --- Data Fetching and Initialization ---
  
    /**
     * Fetches BSB JSON, loads last state, triggers processing, handles initial UI state and errors.
     */
    async function fetchDataAndInitialize() {
      showMessage("Loading Bible data...", "loading");
      listContainer.innerHTML = '<p>Loading...</p>';
      textDisplay.innerHTML = '<h2>Parable Text</h2><p>Loading data...</p>';
      explanationDisplay.innerHTML = '<h3>Explanation</h3>';
      referenceDisplay.innerHTML = '<p>References:</p>';
  
      const lastViewedId = loadLastParable(); // Load saved state *before* fetch potentially fails
  
      try {
        const response = await fetch('BSB.json');
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        bsbData = await response.json();
  
        showMessage("Processing parables...", "loading");
        setTimeout(() => { // Allow UI update
            processParables(); // This now builds index, renders list, and calls displayParable for initial/saved view
            // Initial display logic moved inside processParables to ensure index is ready
        }, 10);
  
      } catch (error) {
        console.error('Critical Error: Could not fetch or parse BSB.json:', error);
        showMessage(`Error: ${error.message}. Ensure BSB.json is valid and accessible.`, 'error');
        listContainer.innerHTML = '<p>Error loading data.</p>';
        textDisplay.innerHTML = '<h2>Error</h2><p>Could not load data.</p>';
      }
    }
  
    // --- Event Listeners Setup ---
    searchInput.addEventListener('input', filterParables);
    // Click listeners for list items and reference links are added dynamically.
  
    // --- Initialisation ---
    fetchDataAndInitialize(); // Start the application
  
  }); // End of DOMContentLoaded listener